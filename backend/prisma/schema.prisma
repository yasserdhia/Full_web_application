// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String       @id @default(cuid())
  email                 String       @unique
  username              String       @unique
  password              String       // Bcrypt hashed
  firstName             String
  lastName              String
  role                  Role         @default(USER)
  isEmailVerified       Boolean      @default(false)
  emailVerificationToken String?
  passwordResetToken    String?
  passwordResetExpires  DateTime?
  twoFactorSecret       String?
  twoFactorEnabled      Boolean      @default(false)
  isActive              Boolean      @default(true)
  lastLogin             DateTime?
  loginAttempts         Int          @default(0)
  lockUntil             DateTime?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  // Relations
  sessions              Session[]
  posts                 Post[]
  comments              Comment[]
  auditLogs             AuditLog[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  isValid      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expiresAt    DateTime

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  slug        String    @unique
  published   Boolean   @default(false)
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model AuditLog {
  id          String     @id @default(cuid())
  userId      String?
  action      String
  resource    String
  resourceId  String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime   @default(now())

  // Relations
  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model RateLimit {
  id          String   @id @default(cuid())
  identifier  String   // IP address or user ID
  action      String   // endpoint or action type
  count       Int      @default(1)
  resetTime   DateTime
  createdAt   DateTime @default(now())

  @@unique([identifier, action])
  @@map("rate_limits")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}